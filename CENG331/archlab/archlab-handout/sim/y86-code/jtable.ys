    .pos 0
    irmovq stack, %rsp
    irmovq $14, %rdi
    call fibsum
    halt

fibsum:
    # sum up fib values from 0 to arg
    # slow and nonsensical, but a nice test!
    # go from 0 to 15 instead of 15 to zero, easier for tests
    irmovq $1, %r11 # storing 1 all the time, even in fib
    rrmovq %rdi, %r12
    xorq %r13, %r13
    xorq %r14, %r14

    andq %r12, %r12
    jmp check

loop:
    rrmovq %r14, %rdi
    call optfib
    addq %r11, %r14
    addq %rax, %r13
    subq %r11, %r12
check:
    jge loop
    rrmovq %r13, %rax
    ret

.align 8
fibtable:
    .quad fib0
    .quad fib1
    .quad fib2
    .quad fib3
    .quad fib4
    .quad fib5

optfib: # a fib optimized (!) for the first 6 cases with a jump table
    # check if > 5
    rrmovq %rdi, %rcx
    irmovq $5, %rdx
    subq %rdx, %rcx
    jg recurse
    
    # otherwise, time for a jump, mult %rdi with 8
    addq %rdi, %rdi
    addq %rdi, %rdi
    addq %rdi, %rdi
    irmovq fibtable, %rcx # calc fibtable + 8 * rdi
    addq %rdi, %rcx
    mrmovq (%rcx), %rcx # dereference
    jmpq %rcx # and jump!

fib0:
fib1:
    irmovq $1, %rax
    ret
fib2:
    irmovq $2, %rax
    ret
fib3:
    irmovq $3, %rax
    ret
fib4:
    irmovq $5, %rax
    ret
fib5:
    irmovq $8, %rax
    ret
recurse:
    # 2^n fib, how optimized!
    subq %r11, %rdi
    pushq %rdi
    call optfib 
    popq %rdi
    pushq %rax
    subq %r11, %rdi
    call optfib
    popq %rcx 
    addq %rcx, %rax
    ret

.pos 0x300
stack:
